AWSTemplateFormatVersion: "2010-09-09"
Description: This is cloudformation template to creates vpc with public and private subnets

##PARAMETER
Parameters:
  VpcCidr:
    Description: Ip range or CIDR block 
    Type: String 
    Default: 10.0.0.0/16       

  PublicSubnet1Cidr:
    Description: Ip range or CIDR block 
    Type: String 
    Default: 10.0.0.0/24

  PublicSubnet2Cidr:
    Description: Ip range or CIDR block 
    Type: String 
    Default: 10.0.1.0/24  

  PrivateSubnet1Cidr:
    Description: Ip range or CIDR block 
    Type: String 
    Default: 10.0.3.0/24

  PrivateSubnet2Cidr:
    Description: Ip range or CIDR block 
    Type: String 
    Default: 10.0.4.0/24   

Resources:

  #CREATION Of VPC  
  Vpc:      
   Type: AWS::EC2::VPC
   Properties:
     CidrBlock: !Ref VpcCidr
     EnableDnsSupport: true
     EnableDnsHostnames: true
     Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-myvpc

#CREATION Of IGW
  InternetGateway:          
    Type: AWS::EC2::InternetGateway
    Properties:
        Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-IGW 

#Attachment of IGW to VPC
  InternetGatewayAttachment:   
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway 
      VpcId: !Ref Vpc

  # Create Public Subnet1
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1Cidr
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicSubnet1
      VpcId: !Ref Vpc 

# Create Public Subnet2
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet2Cidr
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicSubnet2
      VpcId: !Ref Vpc 

# Create Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Public-route-table
      VpcId: !Ref Vpc 

# Add a Public Route to the Route Table
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable

# Associate Public Subnet1 with Public Route Table
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

# Associate Public Subnet2 with Public Route Table
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

# Create Private Subnet1
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet1Cidr
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateSubnet1
      VpcId: !Ref Vpc 

# Create Private Subnet2
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet2Cidr 
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateSubnet2
      VpcId: !Ref Vpc


  ## NAT GATEWAY 
  NatGateway:
    Type: AWS::EC2::NatGateway
    DependsOn: NatPublicIP
    Properties: 
      SubnetId: !Ref PublicSubnet1
      AllocationId: !GetAtt NatPublicIP.AllocationId    

 ## ELASTIC IP
  NatPublicIP:
    Type: AWS::EC2::EIP
    DependsOn: Vpc 
    Properties:
      Domain: vpc
     
 ## PRIVATE ROUTE TABLE
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc 
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Private-route-table
##PRIVATE ROUTE    
  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      NatGatewayId: !Ref NatGateway
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0

##PRIVATE SUBNET ASSOCIATION  
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable
     
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable
    
         


















































































































     













  
                      
        




